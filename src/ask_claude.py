#!/usr/bin/env python3
"""
‡∏™‡πà‡∏á masked JSON ‡πÑ‡∏õ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ Claude AI
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö PDPA compliance - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏ñ‡∏π‡∏Å mask ‡πÅ‡∏•‡πâ‡∏ß
"""

import json
import sys
import os
from pathlib import Path
import anthropic

def load_masked_json(json_file):
    """‡πÇ‡∏´‡∏•‡∏î masked JSON file"""
    with open(json_file, 'r', encoding='utf-8') as f:
        return json.load(f)

def ask_claude(masked_json, question, api_key=None):
    """
    ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Claude AI ‡∏û‡∏£‡πâ‡∏≠‡∏° masked data
    
    Args:
        masked_json: dict - masked JSON data
        question: str - ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ñ‡∏≤‡∏°
        api_key: str - Claude API key (optional, ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å environment ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏)
    """
    # ‡πÉ‡∏ä‡πâ API key ‡∏à‡∏≤‡∏Å parameter ‡∏´‡∏£‡∏∑‡∏≠ environment
    if api_key is None:
        api_key = os.environ.get('ANTHROPIC_API_KEY')
    
    if not api_key:
        print("‚ùå Error: ANTHROPIC_API_KEY not found!")
        print("\n‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API key:")
        print("1. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô environment:")
        print("   export ANTHROPIC_API_KEY='your-api-key-here'")
        print("\n2. ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô parameter:")
        print("   ask_claude(data, question, api_key='your-key')")
        print("\n3. ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå .env:")
        print("   echo 'ANTHROPIC_API_KEY=your-key' > .env")
        return None
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Claude client
    client = anthropic.Anthropic(api_key=api_key)
    
    # ‡πÅ‡∏õ‡∏•‡∏á JSON ‡πÄ‡∏õ‡πá‡∏ô text ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ Claude
    json_text = json.dumps(masked_json, ensure_ascii=False, indent=2)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á prompt
    prompt = f"""‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏á‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Bank Statement ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å mask ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ï‡∏≤‡∏° PDPA ‡πÅ‡∏•‡πâ‡∏ß:
- ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‚Üí NAME_XXX
- ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô ‚Üí THAIID_XXX
- ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå ‚Üí PHONE_XXX
- ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà ‚Üí ADDRESS_XXX
- ‡∏≠‡∏µ‡πÄ‡∏°‡∏• ‚Üí EMAIL_XXX
- ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ‚Üí ACCOUNT_XXX

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Bank Statement (masked):
{json_text}

‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}

‡πÇ‡∏õ‡∏£‡∏î‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å statement ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤ ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢"""

    print(f"\nü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Claude AI...")
    print(f"üìä ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {len(json_text):,} characters")
    print(f"‚ùì ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}\n")
    
    try:
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Claude API
        message = client.messages.create(
            model="claude-3-5-sonnet-20241022",  # ‡πÉ‡∏ä‡πâ model ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            max_tokens=4096,
            temperature=0.3,  # ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏° creative ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
            messages=[
                {
                    "role": "user",
                    "content": prompt
                }
            ]
        )
        
        # ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
        answer = message.content[0].text
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• usage
        usage = message.usage
        print(f"üìà Token Usage:")
        print(f"   Input: {usage.input_tokens:,} tokens")
        print(f"   Output: {usage.output_tokens:,} tokens")
        print(f"   Total: {usage.input_tokens + usage.output_tokens:,} tokens")
        print(f"\n{'='*60}\n")
        
        return answer
        
    except anthropic.APIError as e:
        print(f"‚ùå Claude API Error: {e}")
        return None
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return None

def main():
    if len(sys.argv) < 2:
        print("Usage: python ask_claude.py <masked_json_file> [question]")
        print("\nExample:")
        print('  python ask_claude.py data.json "‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà"')
        print('  python ask_claude.py data.json "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢"')
        sys.exit(1)
    
    json_file = sys.argv[1]
    question = sys.argv[2] if len(sys.argv) > 2 else "‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏á‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ"
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå
    if not Path(json_file).exists():
        print(f"‚ùå Error: File not found: {json_file}")
        sys.exit(1)
    
    # ‡πÅ‡∏™‡∏î‡∏á warning ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ _masked
    if '_masked' not in json_file:
        print("‚ö†Ô∏è  Warning: ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£ masking!")
        print("   ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ '_masked.json' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢\n")
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    print(f"üìÇ Loading: {json_file}")
    masked_data = load_masked_json(json_file)
    
    # ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Claude
    answer = ask_claude(masked_data, question)
    
    if answer:
        print("üí¨ Claude AI ‡∏ï‡∏≠‡∏ö:\n")
        print(answer)
        print(f"\n{'='*60}\n")
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
        output_file = json_file.replace('.json', '_claude_answer.txt')
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(f"‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}\n\n")
            f.write(f"{'='*60}\n\n")
            f.write(answer)
        
        print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà: {output_file}")
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å Claude ‡πÑ‡∏î‡πâ")
        sys.exit(1)

if __name__ == '__main__':
    main()
